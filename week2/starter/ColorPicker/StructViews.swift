/// Copyright (c) 2023 Kodeco Inc.
/// 
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
/// 
/// Notwithstanding the foregoing, you may not use, copy, modify, merge, publish,
/// distribute, sublicense, create a derivative work, and/or sell copies of the
/// Software in any work that is designed, intended, or marketed for pedagogical or
/// instructional purposes related to programming, coding, application development,
/// or information technology.  Permission for such use, copying, modification,
/// merger, publication, distribution, sublicensing, creation of derivative works,
/// or sale is expressly withheld.
/// 
/// This project and source code may use libraries or frameworks that are
/// released under various Open-Source licenses. Use of those libraries and
/// frameworks are governed by their own individual licenses.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.

import SwiftUI

struct ColorPreviewView: View {
    @Binding var color: Color

    var body: some View {
        RoundedRectangle(cornerRadius: 0)
            .foregroundColor(color)
            .overlay(
              RoundedRectangle(cornerRadius: 0)
                .stroke(Color.brown, lineWidth: 10)  /*.overlay(
                                                      RoundedRectangle(cornerRadius: 0)
                                                          .stroke(Color(red: max(0, redColor / 255 - 0.2), green: max(0, greenColor / 255 - 0.2), blue: max(0, blueColor / 255 - 0.2)), lineWidth: 5))*/
                                                    // this is to obtain a darker color than the one generated by the sliders (google...)
              )
    }
}
struct ColorSliderView: View {
  @Binding var colorValue: Double
  var label: String
  var accentColor: Color
  var body: some View {
    VStack {
      Text(label)
      HStack {
        Slider(value: $colorValue, in: 0...255)
          .accentColor(accentColor)
        Text("\(Int(colorValue.rounded()))")
      }
    } 
  }
}
